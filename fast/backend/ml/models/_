# import pandas as pd
# import os
# import numpy as np
# from xgboost import XGBClassifier
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import accuracy_score, classification_report

# class XGModel:
#     def __init__(self):
#         self.model = None
#         self.X_test = None
#         self.y_test = None
#         self.features = None

#     def load_data_and_train_model(self):
#         current_dir = os.path.dirname(os.path.abspath(__file__))
#         data_file_path = os.path.join(current_dir, '..', '..', 'data', 'Metal_Manufacturing_Dataset.csv')
#         data = pd.read_csv(data_file_path)

#         self.features = ['temperature', 'pressure', 'speed', 'tool_wear', 'material_hardness', 'vibration', 'power_consumption']
#         X = data[self.features]
#         y = data['quality_label']

#         X_train, self.X_test, y_train, self.y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#         self.model = XGBClassifier(random_state=42)
#         self.model.fit(X_train, y_train)

#     def predict(self, input_data):
#         return self.model.predict(input_data)

#     def get_model_performance(self):
#         y_pred = self.model.predict(self.X_test)
#         accuracy = accuracy_score(self.y_test, y_pred)
#         report = classification_report(self.y_test, y_pred, output_dict=True)
#         return accuracy, report

#     def get_feature_importance(self):
#         importance = self.model.feature_importances_
#         importance = 100.0 * (importance / importance.max())
#         return {feature: float(imp) for feature, imp in zip(self.features, importance)}

#     def get_scatter_data(self):
#         top_features = sorted(zip(self.features, self.model.feature_importances_), key=lambda x: x[1], reverse=True)[:3]
#         top_feature_names = [f[0] for f in top_features]
        
#         scatter_data = self.X_test[top_feature_names].to_dict(orient='records')
#         for i, (data_point, label) in enumerate(zip(scatter_data, self.y_test)):
#             data_point['quality_label'] = int(label)
#             data_point['id'] = i  # unique identifier for each point
        
#         return scatter_data, top_feature_names

# xg_model = XGModel()
# xg_model.load_data_and_train_model()